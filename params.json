{"name":"Page.js","body":"\r\n ![page router logo](http://f.cl.ly/items/3i3n001d0s1Q031r2q1P/page.png)\r\n\r\n  Tiny ~1200 byte Express-inspired client-side router.\r\n\r\n```js\r\npage('/', index)\r\npage('/user/:user', show)\r\npage('/user/:user/edit', edit)\r\npage('/user/:user/album', album)\r\npage('/user/:user/album/sort', sort)\r\npage('*', notfound)\r\npage()\r\n```\r\n\r\n## Running examples\r\n\r\n  To run examples do the following to install dev dependencies an run the example server:\r\n\r\n    $ npm install\r\n    $ node examples\r\n    $ open http://localhost:3000\r\n\r\n Currently we have examples for:\r\n \r\n   - `basic` minimal application showing basic routing\r\n   - `notfound` similar to `basic` with single-page 404 support\r\n   - `album` showing pagination and external links\r\n   - `profile` simple user profiles\r\n   - `query-string` shows how you can integrate plugins using the router\r\n   - `state` illustrates how the history state may be used to cache data\r\n   - `server` illustrates how to use the dispatch option to server initial content\r\n   - `chrome` Google Chrome style administration interface\r\n\r\n  __NOTE__: keep in mind these examples do not use jQuery or similar, so\r\n  portions of the examples may be relatively verbose, though they're not\r\n  directly related to page.js in any way.\r\n\r\n## API\r\n\r\n### page(path, callback[, callback ...])\r\n\r\n  Defines a route mapping `path` to the given `callback(s)`.\r\n\r\n```js\r\npage('/', user.list)\r\npage('/user/:id', user.load, user.show)\r\npage('/user/:id/edit', user.load, user.edit)\r\npage('*', notfound)\r\n```\r\n\r\n  Links that are not of the same origin are disregarded\r\n  and will not be dispatched.\r\n\r\n### page(path)\r\n\r\n  Navigate to the given `path`.\r\n\r\n```js\r\n$('.view').click(function(e){\r\n  page('/user/12')\r\n  e.preventDefault()\r\n})\r\n```\r\n\r\n### page.show(path)\r\n\r\n  Identical to `page(path)` above.\r\n\r\n### page([options])\r\n\r\n  Register page's `popstate` / `click` bindings. If you're\r\n  doing selective binding you'll like want to pass `{ click: false }`\r\n  to specify this yourself. The following options are available:\r\n\r\n  - `click` bind to click events [__true__]\r\n  - `popstate` bind to popstate [__true__]\r\n  - `dispatch` perform initial dispatch [true]\r\n\r\n  If you wish to load serve initial content\r\n  from the server you likely will want to\r\n  set `dispatch` to __false__.\r\n\r\n### page.start([options])\r\n\r\n  Identical to `page([options])` above.\r\n\r\n### page.stop()\r\n\r\n  Unbind both the `popstate` and `click` handlers.\r\n\r\n### page.base([path])\r\n\r\n  Get or set the base `path`. For example if page.js\r\n  is operating within \"/blog/*\" set the base path to \"/blog\". \r\n\r\n### Context#save()\r\n\r\n  Saves the context using `replaceState()`. For example\r\n  this is useful for caching HTML or other resources\r\n  that were loaded for when a user presses \"back\".\r\n  \r\n  Routes are passed `Context` objects, these may\r\n  be used to share state, for example `ctx.user =`,\r\n  as well as the history \"state\" `ctx.state` that\r\n  the `pushState` API provides.\r\n\r\n## Routing\r\n\r\n  The router uses the same string-to-regexp conversion\r\n  that Express does, so things like \":id\", \":id?\", and \"*\" work\r\n  as you might expect.\r\n\r\n  Another aspect that is much like Express is the ability to\r\n  pass multiple callbacks. You can use this to your advantage\r\n  to flatten nested callbacks, or simply to abstract components.\r\n\r\n### Separating concerns\r\n\r\n  For example suppose you had a route to _edit_ users, and a\r\n  route to _view_ users. In both cases you need to load the user.\r\n  One way to achieve this is with several callbacks as shown here:\r\n\r\n```js\r\npage('/user/:user', load, show)\r\npage('/user/:user/edit', load, edit)\r\n```\r\n\r\n  Using the `*` character we could alter this to match all\r\n  routes prefixed with \"/user\" to achieve the same result:\r\n\r\n```js\r\npage('/user/*', load)\r\npage('/user/:user', show)\r\npage('/user/:user/edit', edit)\r\n```\r\n\r\n  Likewise `*` may be used as catch-alls after all routes\r\n  acting as a 404 handler, before all routes, in-between and\r\n  so on. For example:\r\n\r\n```js\r\npage('/user/:user', load, show)\r\npage('*', function(){\r\n  $('body').text('Not found!')\r\n})\r\n```\r\n\r\n### Default 404 behaviour\r\n\r\n  By default when a route is not matched,\r\n  page.js will invoke `page.stop()` to unbind\r\n  itself, and proceed with redirecting to the\r\n  location requested. This means you may use\r\n  page.js with a multi-page application _without_\r\n  explicitly binding to certain links.\r\n\r\n### Working with parameters and contexts\r\n\r\n  Much like `request` and `response` objects are\r\n  passed around in Express, page.js has a single\r\n  \"Context\" object. Using the previous examples\r\n  of `load` and `show` for a user, we can assign\r\n  arbitrary properties to `ctx` to maintain state\r\n  between callbacks.\r\n\r\n  First to build a `load` function that will load\r\n  the user for subsequent routes you'll need to\r\n  access the \":id\" passed. You can do this with\r\n  `ctx.params.NAME` much like Express:\r\n\r\n```js\r\nfunction load(ctx, next){\r\n  var id = ctx.params.id\r\n}\r\n```\r\n\r\n  Then perform some kind of action against the server,\r\n  assigning the user to `ctx.user` for other routes to\r\n  utilize. `next()` is then invoked to pass control to\r\n  the following matching route in sequence, if any.\r\n\r\n```js\r\nfunction load(ctx, next){\r\n  var id = ctx.params.id\r\n  $.getJSON('/user/' + id + '.json', function(user){\r\n    ctx.user = user\r\n    next()\r\n  })\r\n}\r\n```\r\n\r\n  The \"show\" function might look something like this,\r\n  however you may render templates or do anything you\r\n  want. Note that here `next()` is _not_ invoked, because\r\n  this is considered the \"end point\", and no routes\r\n  will be matched until another link is clicked or\r\n  `page(path)` is called.\r\n\r\n```js\r\nfunction show(ctx){\r\n  $('body')\r\n    .empty()\r\n    .append('<h1>' + ctx.user.name + '<h1>');\r\n}\r\n```\r\n\r\n  Finally using them like so:\r\n\r\n```js\r\npage('/user/:id', load, show)\r\n```\r\n\r\n### Working with state\r\n\r\n  When working with the `pushState` API,\r\n  and thus page.js you may optionally provide\r\n  state objects available when the user navigates\r\n  the history.\r\n\r\n  For example if you had a photo application\r\n  and you performed a relatively expensive\r\n  search to populate a list of images,\r\n  normally when a user clicks \"back\" in\r\n  the browser the route would be invoked\r\n  and the query would be made yet-again.\r\n\r\n  Perhaps the route callback looks like this:\r\n\r\n```js\r\nfunction show(ctx){\r\n  $.getJSON('/photos', function(images){\r\n    displayImages(images)\r\n  })\r\n}\r\n```\r\n\r\n   You may utilize the history's state\r\n   object to cache this result, or any\r\n   other values you wish. This makes it\r\n   possible to completely omit the query\r\n   when a user presses back, providing\r\n   a much nicer experience.\r\n\r\n```js\r\nfunction show(ctx){\r\n  if (ctx.state.images) {\r\n    displayImages(ctx.state.images)\r\n  } else {\r\n    $.getJSON('/photos', function(images){\r\n      ctx.state.images = images\r\n      ctx.save()\r\n      displayImages(images)\r\n    })\r\n  }\r\n}\r\n```\r\n\r\n  __NOTE__: `ctx.save()` must be used\r\n  if the state changes _after_ the first\r\n  tick (xhr, setTimeout, etc), otherwise\r\n  it is optional and the state will be\r\n  saved after dispatching.\r\n\r\n### Matching paths\r\n\r\n  Here are some examples of what's possible\r\n  with the string to `RegExp` conversion.\r\n\r\n  Match an explicit path:\r\n  \r\n```js\r\npage('/about', callback)\r\n```\r\n\r\n  Match with required parameter accessed via `ctx.params.name`:\r\n\r\n```js\r\npage('/user/:name', callback)\r\n```\r\n\r\n  Match with several params, for example `/user/tj/edit` or\r\n  `/user/tj/view`.\r\n\r\n```js\r\npage('/user/:name/:operation', callback)\r\n```\r\n\r\n  Match with one optional and one required, now `/user/tj`\r\n  will match the same route as `/user/tj/show` etc:\r\n\r\n```js\r\npage('/user/:name/:operation?', callback)\r\n```\r\n\r\n  Use the wildcard char \"*\" to match across segments,\r\n  available via `ctx.params[N]` where __N__ is the\r\n  index of \"*\" since you may use several. For example\r\n  the following will match `/user/12/edit`, `/user/12/albums/2/admin`\r\n  and so on.\r\n\r\n```js\r\npage('/user/*', loadUser)\r\n```\r\n\r\n  Named wildcard accessed, for example `/file/javascripts/jquery.js`\r\n  would provide \"/javascripts/jquery.js\" as `ctx.params.file`:\r\n\r\n```js\r\npage('/file/:file(*)', loadUser)\r\n```\r\n\r\n  And of course `RegExp` literals, where the capture\r\n  groups are available via `ctx.params[N]` where __N__\r\n  is the index of the capture group.\r\n\r\n```js\r\npage(/^\\/commits\\/(\\d+)\\.\\.(\\d+)/, loadUser)\r\n```\r\n\r\n\r\n## Plugins\r\n\r\n  Currently there are no official plugins,\r\n  however _examples/query-string/query.js_\r\n  will provide a parsed `ctx.query` object\r\n  derived from [https://github.com/visionmedia/node-querystring](https://github.com/visionmedia/node-querystring).\r\n\r\n  Usage by using \"*\" to match any path\r\n  in order to parse the query-string:\r\n\r\n```js\r\npage('*', parse)\r\npage('/', show)\r\npage()\r\n\r\nfunction parse(ctx, next) {\r\n  ctx.query = qs.parse(location.search.slice(1));\r\n  next();\r\n}\r\n\r\nfunction show(ctx) {\r\n  if (Object.keys(ctx.query).length) {\r\n    document\r\n      .querySelector('pre')\r\n      .textContent = JSON.stringify(ctx.query, null, 2);\r\n  }\r\n}\r\n```\r\n\r\n## License \r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","tagline":"Micro client-side router inspired by the Express router (~1200 bytes)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}